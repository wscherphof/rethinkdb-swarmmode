#!/bin/bash

usage () { echo "./go/build -e dev -p 80 -p 443 -A master -t wscherphof/expeertise:0.1 ../expeertise/"; }

while getopts "t:p:e:a:A:" opt; do
    case $opt in
        t  ) TAG="$OPTARG";;
        e  ) ENV="$OPTARG";;
        p  ) PORTS+=("$OPTARG");;
        a  ) ADDS+=("$OPTARG");;
        A  ) TREEISH="$OPTARG";;
        # h  ) usage; exit;;
        # \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        # :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        # *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done
shift $((OPTIND -1))

pushd "$1" 1>/dev/null
if [ "$?" != "0" ]; then
	exit $?
fi

echo "* formatting source code..."
go fmt
echo "* compiling..."
# cf. https://medium.com/@kelseyhightower/optimizing-docker-images-for-static-binaries-b5696e26eb07#.wmlq1nj3d
CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w' .
if [ "${TAG}" = "" -o "$?" != "0" ]; then
	exit $?
fi

BINARY="$(pwd | awk -F "/" '{print $NF}')" # go build names the binary after the source's subdirectory

echo "FROM scratch" > ./Dockerfile
echo "ADD ${BINARY} /" >> ./Dockerfile
echo "EXPOSE ${PORTS[@]}" >> ./Dockerfile
echo "ENTRYPOINT [\"/${BINARY}\"]" >> ./Dockerfile

if [ "${TREEISH}" ]; then
	echo "ADD archive.tar.gz /" >> ./Dockerfile
	git archive --format tar.gz -o archive.tar.gz ${TREEISH} .
fi

if [ "${ENV}" ]; then
	# Build on all nodes, skipping the push to the repository.
	# Dirty, but quick.
	for add in "${ADDS[@]}"; do
		echo "ADD \"$(basename ${add})\"" \"/\" >> ./Dockerfile
	done
	for type in worker manager
	do
		for (( i=1; ; i++ ))
		do
			node="${ENV}-${type}-${i}"
			docker-machine status $node &>/dev/null
			if [ "$?" = "0" ]; then
				echo "* building image on $node..."
				dir="$(docker-machine ssh $node pwd)"
				if [ "${TREEISH}" ]; then
					docker-machine scp ./archive.tar.gz ${node}:${dir}
				fi
				docker-machine scp ./${BINARY} ${node}:${dir}
				docker-machine scp ./Dockerfile ${node}:${dir}
				for add in "${ADDS[@]}"; do
					docker-machine scp "${add}" ${node}:${dir}
				done
				docker-machine ssh $node sudo docker build -t ${TAG} .
			else
				break
			fi
		done
	done
else
	# Build locally and use the repository for shipping the image to the nodes.
	# Pretty, but slow.
	for add in "${ADDS[@]}"; do
		echo "ADD \"${add}\" \"/\"" >> ./Dockerfile
	done
	echo "* building image..."
	docker build -t ${TAG} .
	echo "* pushing image..."
	docker push ${TAG}
fi
rm ./${BINARY} ./Dockerfile ./archive.tar.gz

popd 1>/dev/null
